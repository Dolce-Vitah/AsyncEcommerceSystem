services:
  orders-db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: orders
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d orders" ]
      interval: 10s
      timeout: 5s
      retries: 5

  payments-db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: payments
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d payments" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  orders-service:
    build:
      context: .
      dockerfile: ./OrdersService.Dockerfile
    depends_on:
      orders-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=orders-db;Database=orders;Username=user;Password=pass
      - Kafka__BootstrapServers=kafka:9092
    ports:
      - "5001:8080"

  payments-service:
    build:
      context: .
      dockerfile: ./PaymentsService.Dockerfile
    depends_on:
      payments-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=payments-db;Database=payments;Username=user;Password=pass
      - Kafka__BootstrapServers=kafka:9092
    ports:
      - "5002:8080"

  api-gateway:
    build:
      context: .
      dockerfile: ./ApiGateway.Dockerfile
    depends_on:
      - orders-service
      - payments-service
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  frontend:
    build:
      context: .
      dockerfile: ./Frontend.Dockerfile
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: "http://api-gateway:8080"
    depends_on:
      - api-gateway
